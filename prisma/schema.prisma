// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

generator jsonSchema {
  provider                 = "prisma-json-schema-generator"
  includeRequiredFields    = "true"
  keepRelationScalarFields = "true"
  output                   = "./"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  firstName    String
  lastName     String
  passwordHash String
  createdAt    DateTime @default(now())
  udpatedAt    DateTime @updatedAt

  sessions Session[]
  account Account?
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner        User                 @relation(fields: [userId], references: [id])
  userId       String               @unique
  statements   AccountStatement[]
  transactions AccountTransaction[]
}

model AccountStatement {
  date    DateTime @db.Date
  balance Float

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  @@id([accountId, date])
}

model Ledger {
  id      String     @id @default(uuid())
  network NetworkType
  // name    String     @unique

  statements   LedgerStatement[]
  credits      LedgerTransaction[]  @relation(name: "credit")
  debits       LedgerTransaction[]  @relation(name: "debit")
  transactions AccountTransaction[]
}

enum NetworkType {
  btc
  btcTestNetwork
  eth
  guorli
}

model LedgerStatement {
  date    DateTime @default(now()) @db.Date
  balance Float

  ledger   Ledger @relation(fields: [ledgerId], references: [id])
  ledgerId String

  @@id([ledgerId, date])
}

model LedgerTransaction {
  id     String   @id @default(uuid())
  amount Float
  date   DateTime @default(now())

  from   Ledger @relation(name: "credit", fields: [fromId], references: [id])
  fromId String
  to     Ledger @relation(name: "debit", fields: [toId], references: [id])
  toId   String
}

model AccountTransaction {
  id           String                         @id @default(uuid())
  date         DateTime                       @default(now())
  amount       Float
  typeInternal AccountTransactionTypeInternal
  typeExternal AccountTransactionTypeExternal

  ledger    Ledger  @relation(fields: [ledgerId], references: [id])
  ledgerId  String
  account   Account @relation(fields: [accountId], references: [id])
  accountId String
}

enum AccountTransactionTypeInternal {
  credit
  debit
}

enum AccountTransactionTypeExternal {
  deposit
  withdrawal
  bankFee
}
