generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

generator jsonSchema {
  provider                 = "prisma-json-schema-generator"
  output                   = "./"
  includeRequiredFields    = "true"
  keepRelationScalarFields = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  userIndex    Int       @default(autoincrement())
  email        String    @unique
  firstName    String
  lastName     String
  passwordHash String
  createdAt    DateTime  @default(now())
  udpatedAt    DateTime  @updatedAt
  accountId    String?   @unique
  sessions     Session[]
  account      Account?  @relation(fields: [accountId], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id           String               @id @default(uuid())
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  statements   AccountStatement[]
  transactions AccountTransaction[]
  ledgers      Ledger[]
  user         User?
}

model AccountStatement {
  date      DateTime @db.Date
  balance   Float
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])

  @@id([accountId, date])
}

model Ledger {
  id            String               @id @default(uuid())
  accountId     String
  network       NetworkType
  walletAddress String?
  account       Account              @relation(fields: [accountId], references: [id])
  transactions  AccountTransaction[]
  statements    LedgerStatement[]
  credits       LedgerTransaction[]  @relation("credit")
  debits        LedgerTransaction[]  @relation("debit")

  @@unique([accountId, network])
}

model LedgerStatement {
  date     DateTime @default(now()) 
  balance  Float
  ledgerId String
  ledger   Ledger   @relation(fields: [ledgerId], references: [id])

  @@id([ledgerId, date])
  @@unique([ledgerId, date])
}

model LedgerTransaction {
  id     String   @id @default(uuid())
  amount Float
  date   DateTime @default(now())
  fromId String
  toId   String
  from   Ledger   @relation("credit", fields: [fromId], references: [id])
  to     Ledger   @relation("debit", fields: [toId], references: [id])
}

model AccountTransaction {
  id           String                         @id @default(uuid())
  date         DateTime                       @default(now())
  amount       Float
  typeInternal AccountTransactionTypeInternal
  typeExternal AccountTransactionTypeExternal
  ledgerId     String
  accountId    String
  account      Account                        @relation(fields: [accountId], references: [id])
  ledger       Ledger                         @relation(fields: [ledgerId], references: [id])
}

enum NetworkType {
  btc
  btcTestNetwork
  eth
  goerli
}

enum AccountTransactionTypeInternal {
  credit
  debit
}

enum AccountTransactionTypeExternal {
  deposit
  withdrawal
  bankFee
}
